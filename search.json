[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "exex",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "exex",
    "section": "Install",
    "text": "Install\npip install exex\n\nC2 = Gas('C2')\n\n\nO2 = Gas('O2')\n\n\nCO2 = Gas('CO2')\n\n\nr = Reaction(reactants=[Gas('C2'), Gas('O2')], products=[Gas('CO2')])\n\n\nr.__dict__\n\n{'reaction': <chemlib.chemistry.Reaction>,\n 'reactants': [exex.gas.core.Gas(formula='C₂'),\n  exex.gas.core.Gas(formula='O₂')],\n 'products': [exex.gas.core.Gas(formula='C₁O₂')],\n 'formula': '1C₂ + 1O₂ --> 1C₁O₂',\n 'system': <exex.system.System>,\n 'environment': <exex.environment.OpenContainer>}\n\n\n\nCO2.get_system()\n\n<exex.system.System>\n\n\n\nr.system.__dict__\n\n{'universe': None,\n 'current_time': None,\n 'highest_time': None,\n 'reactions': [exex.reaction.core.Reaction(formula='1C₂ + 1O₂ --> 1C₁O₂')],\n '_subscribers': {},\n 'idx_reaction': None}\n\n\n\nr\n\nexex.reaction.core.Reaction(formula='1C₂ + 1O₂ --> 1C₁O₂')\n\n\n\nCO2.properties\n\n{'mass': <exex.core.Mass>,\n 'mole': <exex.core.Mole>,\n 'pressure': <exex.core.Pressure>,\n 'volume': <exex.core.Volume>,\n 'temperature': <exex.core.Temperature>,\n 'ideal_gas_constant': <exex.gas.core.IdealGasConstant>,\n 'is_ideal_gas': <exex.gas.core.IsIdealGas>}\n\n\n\nCO2.laws['mass_mole_ratio'].__dict__\n\n{'compound': exex.gas.core.Gas(formula='C₁O₂'),\n 'properties': [{'object': exex.core.Mass}, {'object': exex.core.Mole}]}\n\n\n\nfrom exex.utils import camel_to_snake\n\n\ncamel2snake(CO2.__class__.__name__)\n\n'gas'\n\n\n\nC2.snake_name\n\n'C2'\n\n\n\nreactants = [C2, O2]\n\n\ndic = {}\n\n\nC2.formula\n\n'C₂'\n\n\n\nfor reactant in reactants:\n    dic[reactant.snake_name] = reactant\n\n\ndic\n\n{'C2': exex.gas.core.Gas(formula='C₂'), 'O2': exex.gas.core.Gas(formula='O₂')}\n\n\n\nC2\n\nexex.gas.core.Gas(formula='C₂')\n\n\n\nC2.__dict__\n\n{'properties': {'mass': <exex.core.Mass>,\n  'mole': <exex.core.Mole>,\n  'pressure': <exex.core.Pressure>,\n  'volume': <exex.core.Volume>,\n  'temperature': <exex.core.Temperature>,\n  'ideal_gas_constant': <exex.gas.core.IdealGasConstant>,\n  'is_ideal_gas': <exex.gas.core.IsIdealGas>},\n 'laws': {'mass_mole_ratio': <exex.compound.core.MassMoleRatio>,\n  'boyle_law': <exex.gas.core.BoyleLaw>,\n  'charles_law': <exex.gas.core.CharlesLaw>,\n  'avogadro_law': <exex.gas.core.AvogadroLaw>,\n  'ideal_gas_law': <exex.gas.core.IdealGasLaw>},\n 'time': None,\n 'system': <exex.system.System>,\n 'elements': [<chemlib.chemistry.Element>,\n  <chemlib.chemistry.Element>],\n 'formula': 'C₂',\n 'coefficient': 1,\n 'occurences': {'C': 2}}\n\n\n\nC2.formula\n\n'C₂'\n\n\n\nr.reaction.__dict__\n\n{'reactants': [exex.gas.core.Gas(formula='C₂'),\n  exex.gas.core.Gas(formula='O₂')],\n 'products': [exex.gas.core.Gas(formula='C₁O₂')],\n 'compounds': [exex.gas.core.Gas(formula='C₂'),\n  exex.gas.core.Gas(formula='O₂'),\n  exex.gas.core.Gas(formula='C₁O₂')],\n 'reactant_formulas': ['C₂', 'O₂'],\n 'product_formulas': ['C₁O₂'],\n 'formula': '1C₂ + 1O₂ --> 1C₁O₂',\n 'coefficients': {'C₂': 1, 'O₂': 1, 'C₁O₂': 1},\n 'constituents': ['C₂', 'O₂', 'C₁O₂'],\n 'reactant_occurences': {'C': 2, 'O': 2},\n 'product_occurences': {'C': 1, 'O': 2},\n 'is_balanced': False}\n\n\n\nfrom chemlib import Reaction, Compound\n\n\nReaction(reactants=[Compound('CO2')], products=[]).__dict__\n\n{'reactants': [<chemlib.chemistry.Compound>],\n 'products': [],\n 'compounds': [<chemlib.chemistry.Compound>],\n 'reactant_formulas': ['C₁O₂'],\n 'product_formulas': [],\n 'formula': '1C₁O₂ --> ',\n 'coefficients': {'C₁O₂': 1},\n 'constituents': ['C₁O₂'],\n 'reactant_occurences': {'C': 1, 'O': 2},\n 'product_occurences': {},\n 'is_balanced': False}"
  },
  {
    "objectID": "gas.core.html",
    "href": "gas.core.html",
    "title": "Gas",
    "section": "",
    "text": "IdealGasConstant\n\n IdealGasConstant (compound)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nIsIdealGas\n\n IsIdealGas (compound)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nLaws\n\nmass mole ratio\nmole volume ratio\n\n\nThe Simple Gas Law\n\nsource\n\n\n\nBoyleLaw\n\n BoyleLaw (compound:exex.compound.core.Compound)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nCharlesLaw\n\n CharlesLaw (compound:exex.compound.core.Compound)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nAvogadroLaw\n\n AvogadroLaw (compound:exex.compound.core.Compound)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nThe Ideal Gas Law\n\npressure = {\n    \"pressure\": {\"unit\": \"pascal\", \"property\": Pressure},\n    \"x\": {\"unit\": \"pascal\", \"property\": Pressure},\n}\n\n\nsource\n\n\n\nIdealGasLaw\n\n IdealGasLaw (compound:exex.compound.core.Compound)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nStates\n\nIdeal Gas State\nReturn True if the ideal gas equation holds\n\nsource\n\n\n\nState\n\n State (context)\n\nHelper class that provides a standard way to create an ABC using inheritance.\n\n\nGas Compound\nGas -> self._config_laws -> init law -> law._config_properties\n\nsource\n\n\nGas\n\n Gas (formula:str)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\n\nType\nDetails\n\n\n\n\nformula\nstr\nthe chemical formula\n\n\nReturns\nNone\n\n\n\n\nSarin gas is developed by Nazi during WWII\n\nC4H10FO2P = Gas('C4H10FO2P')\n\n\nC4H10FO2P\n\n__main__.Gas(formula='C₄H₁₀F₁O₂P₁')\n\n\n\nC4H10FO2P.properties\n\n{'mass': <exex.core.Mass>,\n 'mole': <exex.core.Mole>,\n 'pressure': <exex.core.Pressure>,\n 'volume': <exex.core.Volume>,\n 'temperature': <exex.core.Temperature>,\n 'ideal_gas_constant': <__main__.IdealGasConstant>,\n 'is_ideal_gas': <__main__.IsIdealGas>}\n\n\n\nC4H10FO2P.laws['charles_law']\n\n<__main__.CharlesLaw>\n\n\n\nC4H10FO2P.laws['ideal_gas_law'].e\n\nEq(P*V, R*T*n)\n\n\n\nC4H10FO2P.laws['ideal_gas_law'].e\n\nEq(P*V, R*T*n)"
  },
  {
    "objectID": "system.html",
    "href": "system.html",
    "title": "system",
    "section": "",
    "text": "source\n\nSystem\n\n System (reactions=[])\n\nInitialize self. See help(type(self)) for accurate signature.\n\nclass Compound(): pass\n\n\nH2O, CO2, NO3 = Compound(), Compound(), Compound()\n\n\nour_universe = 1\n\n\nreaction1 = 1\n\n\nsubscribers = dict(\n    our_universe = {\n        \"mass\": lambda x:1,\n        \"reactions\": {\n            reaction1: {\n                H2O: [max, max, max],\n                CO2: [max, max, max],\n                NO3: [max, max, max],\n            },\n            'reaction2': None\n        }\n    }\n)\n\n\nsubscribers\n\n{'our_universe': {'mass': <function __main__.<lambda>(x)>,\n  'reactions': {1: {<__main__.Compound>: [<function max>,\n     <function max>,\n     <function max>],\n    <__main__.Compound>: [<function max>,\n     <function max>,\n     <function max>],\n    <__main__.Compound>: [<function max>,\n     <function max>,\n     <function max>]},\n   'reaction2': None}}}\n\n\n\nL(subscribers)\n\n(#3) ['our_universe','reaction1','reaction2']"
  },
  {
    "objectID": "02_tutorial_reaction.html",
    "href": "02_tutorial_reaction.html",
    "title": "exex",
    "section": "",
    "text": "Example 1: Photosynthesis\nPage 297 from Nivaldo J. Tro’s Chemistry\nIn photosynthesis, plants convert carbon dioxide and water into glucose \\(\\left(\\mathrm{C}_6 \\mathrm{H}_{12} \\mathrm{O}_6\\right)\\) according to the reaction: \\[\n6 \\mathrm{CO}_2(g)+6 \\mathrm{H}_2 \\mathrm{O}(l) \\stackrel{\\text { sunlight }}{\\longrightarrow} 6 \\mathrm{O}_2(g)+\\mathrm{C}_6 \\mathrm{H}_{12} \\mathrm{O}_6(a q)\n\\] Suppose you determine that a particular plant consumes \\(37.8 \\mathrm{~g}\\) of \\(\\mathrm{CO}_2\\) in one week. Assuming that there is more than enough water present to react with all of the \\(\\mathrm{CO}_2\\), what mass of glucose (in grams) can the plant synthesize from the \\(\\mathrm{CO}_2\\) ?\n\nCO2 = Compound('CO2')\n\n\nH2O = Compound('H2O')\n\n\nO2 = Compound('O2')\n\n\nC6H12O6 = Compound('C6H1206')\n\n\nr = Reaction(reactants=[CO2, H2O], products=[O2, C6H12O6])\n\n\nr\n\nexex.reaction.core.Reaction(formula='1C₁O₂ + 1H₂O₁ --> 1O₂ + 1C₆H₁₂₀₆', is_balanced=False)\n\n\n\nr.balance()\n\n\nr.formula\n\n'12C₁O₂ + 1206H₂O₁ --> 615O₂ + 2C₆H₁₂₀₆'\n\n\n\ndata = dict(\n    CO2 = {'mass': '23.1 g', 'temperature': '23 celsius'},\n    C6H1206 = {'mass': '31.3 kilogram', 'volume': '31.3 milliliter'},\n    Environment = {'pressure': '22 atm'},\n    Reaction={'total_mass': '141.3 kg'}\n)\n\n\ndata\n\n{'CO2': {'mass': '23.1 g', 'temperature': '23 celsius'},\n 'C6H1206': {'mass': '31.3 kilogram', 'volume': '31.3 milliliter'},\n 'Environment': {'pressure': '22 atm'},\n 'Reaction': {'total_mass': '141.3 kg'}}\n\n\n\nL(data)\n\n(#4) ['CO2','C6H1206','Environment','Reaction']\n\n\n\ndata.items()\n\ndict_items([('CO2', {'mass': '23.1 g', 'temperature': '23 celsius'}), ('C6H1206', {'mass': '31.3 kilogram', 'volume': '31.3 milliliter'}), ('Environment', {'pressure': '22 atm'}), ('Reaction', {'total_mass': '141.3 kg'})])\n\n\n\ndata['Reaction'] = None\n\n\ndata\n\n{'CO2': {'mass': '23.1 g', 'temperature': '23 celsius'},\n 'C6H1206': {'mass': '31.3 kilogram', 'volume': '31.3 milliliter'},\n 'Environment': {'pressure': '22 atm'},\n 'Reaction': None}\n\n\n\ndef is_chemical_formulas(x: str) -> bool:\n    pass\n\n\nimport re\n\n\ntxt = 'hello'\n\n\nx = re.search(\"([A-Z][a-z]?)(\\d*(?:(?:[\\.|\\,])\\d+(?:\\%)?)?)|(?:[\\(|\\[])([^()]*(?:(?:[\\(|\\[]).*(?:[\\)|\\]]))?[^()]*)(?:[\\)|\\]])(\\d*(?:(?:[\\.|\\,]?)\\d+(?:\\%)?))\", txt)\n\n\ndef extract_data(x):\n    reaction = x['Reaction'] if 'Reaction' in x else None\n    environment = x['Environment'] if 'Environment' in x else None\n\n\nextract_data(data)\n\n{'CO2': {'mass': '23.1 g', 'temperature': '23 celsius'},\n 'C6H1206': {'mass': '31.3 kilogram', 'volume': '31.3 milliliter'},\n 'Environment': {'pressure': '22 atm'},\n 'Reaction': None}\n\n\n\nfor k, v in data.items():\n    print(k, v)\n\nCO2 {'mass': '23.1 g', 'temperature': '23 celsius'}\nC6H1206 {'mass': '31.3 kilogram', 'volume': '31.3 milliliter'}\nEnvironment {'pressure': '22 atm'}\nReaction {'total_mass': '141.3 kg'}\n\n\n\n#L(data).get\n\n\n#L(data).attrgot()\n\n\nr.initial_condition(data)"
  },
  {
    "objectID": "utils.html",
    "href": "utils.html",
    "title": "utils",
    "section": "",
    "text": "camel_to_snake\n\n camel_to_snake (name:str)\n\n\n\n\n\nType\nDetails\n\n\n\n\nname\nstr\nthe string that you want to convert\n\n\nReturns\nstr\nconverted string\n\n\n\n\nconverted_str = camel_to_snake('IdealGasLaw')\n\n\nconverted_str\n\n'ideal_gas_law'\n\n\n\nsource\n\n\nsnake_name\n\n snake_name (x)\n\nGet the snake style name of an instance\n\n\n\n\nType\nDetails\n\n\n\n\nx\n\n\n\n\nReturns\nstr\nreturn the snake name style\n\n\n\n\nclass AtomicOrbital(): pass\n\n\nAtomicOrbital\n\n__main__.AtomicOrbital\n\n\n\nname = snake_name(AtomicOrbital())\n\n\nsnake_name(AtomicOrbital())\n\n'atomic_orbital'\n\n\n\nsnake_name(AtomicOrbital)\n\n'atomic_orbital'\n\n\n\nname\n\n'atomic_orbital'"
  },
  {
    "objectID": "environment.core.html",
    "href": "environment.core.html",
    "title": "environment",
    "section": "",
    "text": "source\n\nEnvironment\n\n Environment ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nContainer\n\nsource\n\n\nContainer\n\n Container ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nOpenContainer\n\n OpenContainer ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nClosedContainer\n\n ClosedContainer ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\nopen_container = OpenContainer()\n\n\nopen_container.__dict__\n\n{'properties': {}, 'laws': {}}"
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "source\n\nEvent\n\n Event (iterable=())\n\nBuilt-in mutable sequence.\nIf no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.\n\n\nUnit\n\nsource\n\n\nUnit\n\n Unit ()\n\nDefault Units\n\n@patch\ndef to_standard(self: Q): return 1\n\n\nmoles = Q(0.214, Unit.MOLE)\n\n\nmoles\n\n0.214 mole\n\n\n\nmoles.__dict__\n\n{'_magnitude': 0.214,\n '_units': <UnitsContainer({'mole': 1})>,\n '_Quantity__used': False,\n '_Quantity__handling': None}\n\n\n\nmoles.dimensionality\n\n<UnitsContainer({'[substance]': 1})>\n\n\n\nspecific_heat = Q(0.235, Unit.SPECIFIC_HEAT)\n\n\nspecific_heat.ito_reduced_units()\n\n\nm = Q('3.21 kilogram')\n\n\nm\n\n3.21 kilogram\n\n\n\n@ureg.check('[length]')\ndef foo(length):\n    return length\n\n\nfoo('10 meter')\n\n'10 meter'\n\n\n\n@ureg.wraps((ureg.meter, ureg.gram), (ureg.meter, ureg.kilogram))\ndef mypp(length, mass):\n    return length, mass\n\n\nmypp('10 kilometer', '1 kilogram')\n\n(10000.0 <Unit('meter')>, 1 <Unit('gram')>)\n\n\n\n@ureg.check('[mass]')\n@ureg.wraps(None, None)\ndef set_mass(mass):\n    return mass\n\n\nset_mass('20 kilogram')\n\n'20 kilogram'\n\n\n\n@ureg.check('[mass]')\n@ureg.wraps(ureg.gram, ureg.kilogram)\ndef set_mass(mass):\n    return mass\n\n\nset_mass('20 kilogram')\n\n20 gram\n\n\n\n\nData\n\nsource\n\n\nObject\n\n Object ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nPropertyData\n\nc = PropertyData({'0': {'mass': 2, 'object': Object()}})\n\n\nc['0']\n\n{'mass': 2, 'object': <__main__.Object>}\n\n\n\nc['1'] = {'mass': 2.1, 'object': 'XXX'}\n\n\n\nProprety\n\nsource\n\n\nPropertyObservable\n\n PropertyObservable (compound)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nMass\n\n Mass (compound)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nMass.set_mass\n\n Mass.set_mass ()\n\n\nsource\n\n\nMole\n\n Mole (compound)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nPressure\n\n Pressure (compound)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nVolume\n\n Volume (compound)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nTemperature\n\n Temperature (compound)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nLaw\n\nsource\n\n\nLaw\n\n Law ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\nclass Law:\n    def __init__(self):\n        self._properties: dict = []\n        self._laws: dict = []\n    \n    def relation(self):\n        #self._laws['x']\n        pass\n\n\n\nSystem\nSystem is an mediator that compounds and reactions communicate through each others.\n\nsource\n\n\nSystem\n\n System ()\n\nInitialize self. See help(type(self)) for accurate signature."
  },
  {
    "objectID": "00_problems.html",
    "href": "00_problems.html",
    "title": "exex",
    "section": "",
    "text": "\\(\\text{Food Available} = \\text{Market Price } \\times 0.1\\)\nSo the Market Price indirectly determines the Amount of Food\n\nclass MarketPrice:\n    def __init__(self):\n        self.is_constant = False\n        self.value = 1000\n\n\nclass FoodAvailable:\n    def __init__(self): self.is_constant = False\n    def compute(self):\n        return MarketPrice().value * 0.1\n\n\nclass NumberOfChickens:\n    def __init__(self):\n        self.is_constant = True\n        self.value = 5\n\n\nclass AmountOfFood:\n    def __init__(self): self.is_constant = False\n    def compute(self):\n        return FoodAvailable().compute() / NumberOfChickens().value\n\nSuppose as bellow\n\nAmountOfFood().compute()\n\n20.0"
  },
  {
    "objectID": "gas.reaction.html",
    "href": "gas.reaction.html",
    "title": "Gas Reaction",
    "section": "",
    "text": "source\n\nGasReaction\n\n GasReaction ()\n\nInitialize self. See help(type(self)) for accurate signature."
  },
  {
    "objectID": "pseudocode.html",
    "href": "pseudocode.html",
    "title": "exex",
    "section": "",
    "text": "Problems - If store value of a property inside the object - One property can belong to two different laws. So if that property change, which law need to be change?\n\n\n\\(\\mathrm{C}_6 \\mathrm{H}_{12} \\mathrm{O}_6 (\\mathrm{s}) \\rightarrow 2 \\mathrm{C}_2 \\mathrm{H}_{6} \\mathrm{O}(l)+2 \\mathrm{CO}_2(\\mathrm{~g})\\)\n\n# from universe import our_universe\n\n\n# system = System()\n\n\n# C6H12O6 = Compound('C6H12O6', 'solid')\n\n\n# C2H6O = Compound('C2H6O', 'liquid')\n\n\n# CO2 = Compound('CO2', 'gas')\n\n\n# open_container = OpenContainer()\n\n\n# r = Reaction(reactants=[C6H12O6], product=[C2H6O, CO2],\n#              catalyst=[],\n#              environment=open_container, system=system)\n\nThe current timestep is None\n\n# final_state = system.set_time(-1)\n\nAfter set mass, the system auto generated all properties of other component at that timestep\n\n# final_state.compound(C6H12O6).setMass('1.0 g')\n\n\n# initial_state = system.set_time(1)\n\n\n# initial_state.compound(CO2).getVolume()"
  },
  {
    "objectID": "compound.core.html",
    "href": "compound.core.html",
    "title": "Compound",
    "section": "",
    "text": "State\n\n State ()\n\n\n\nMatter\n\nsource\n\n\nMatter\n\n Matter ()\n\nInitialize self. See help(type(self)) for accurate signature.\nAll properties that a compound has always being governed by some laws.\n\nLaws\n\nsource\n\n\n\nMassMoleRatio\n\n MassMoleRatio (compound)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nLaws\n\nsource\n\n\nCompound\n\n Compound (formula:str)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\n\nType\nDetails\n\n\n\n\nformula\nstr\nthe chemical formula\n\n\nReturns\nNone\n\n\n\n\n\n@patch\ndef set_amount(self: Compound, amount):\n    pass\n\n\ndef set_mass():\n    pass\n\n\nclass A:\n    COMPOUNDS = [10, 20, 30]\n    def __init__(self):\n        self.compounds = [1, 2, 3]\n\n\nclass B(A):\n    COMPOUNDS = [40, 50, 60]\n    def __init__(self):\n        super().__init__()\n        self.compounds = [4, 5, 6]\n    \n    @classmethod\n    def base(cls):\n        return cls.__bases__\n\n\nb = B()\n\n\nb.base()\n\n(__main__.A,)\n\n\n\nA.__bases__\n\n(object,)\n\n\n\nB.__bases__\n\n(__main__.A,)\n\n\n\nb.__dict__\n\n{'compounds': [4, 5, 6]}\n\n\n\nH2O = Compound('H2O')\n\n\nH2O.__dict__\n\n{'properties': {'mass': <exex.core.Mass>,\n  'mole': <exex.core.Mole>},\n 'laws': {'mass_mole_ratio': <__main__.MassMoleRatio>},\n 'time': None,\n 'system': None,\n 'add_laws': [__main__.MassMoleRatio],\n 'elements': [<chemlib.chemistry.Element>,\n  <chemlib.chemistry.Element>,\n  <chemlib.chemistry.Element>],\n 'formula': 'H₂O₁',\n '_formula': 'H2O',\n 'coefficient': 1,\n 'occurences': {'H': 2, 'O': 1}}"
  },
  {
    "objectID": "tutorial_gas.html",
    "href": "tutorial_gas.html",
    "title": "Tutorials for Gas",
    "section": "",
    "text": "Example 1\n\nH2 = Gas('H2')\n\n\nCl2 = Gas('Cl2')\n\n\nr = Reaction(reactants=[H2, Cl2])\n\n\nr.__dict__\n\n{'reaction': <chemlib.chemistry.Reaction>,\n 'reactants': [exex.gas.core.Gas(formula='H₂'),\n  exex.gas.core.Gas(formula='Cl₂')],\n 'products': [],\n 'formula': '1H₂ + 1Cl₂ --> ',\n 'system': <exex.system.System>,\n 'environment': <exex.environment.OpenContainer>}\n\n\n\nr.system\n\n<exex.system.System>\n\n\n\nH2.system\n\n<exex.system.System>"
  },
  {
    "objectID": "universe.html",
    "href": "universe.html",
    "title": "Universe",
    "section": "",
    "text": "source\n\nUniverse\n\n Universe ()\n\nAn abstract base class for create a new universe\n\nsource\n\n\nOurUniverse\n\n OurUniverse ()\n\nThe universe that has the law of physics from our universe (yeah you and me)\n\n\nLaws\n\nsource\n\n\nConservationOfMass\n\n ConservationOfMass ()\n\nThe sum of all masses in the universe\n\nsource\n\n\nConservationOfEnergy\n\n ConservationOfEnergy ()\n\nThe sum of all energies in the universe\n\nsource\n\n\nConservationOfElectricCharge\n\n ConservationOfElectricCharge ()\n\nThe sum of all electric charges in the universe"
  },
  {
    "objectID": "reaction.core.html",
    "href": "reaction.core.html",
    "title": "Reaction",
    "section": "",
    "text": "source\n\nReaction.compounds\n\n Reaction.compounds ()\n\n\nsource\n\n\nReaction.initial_condition\n\n Reaction.initial_condition (data)\n\n\nsource\n\n\nReaction.final_conditon\n\n Reaction.final_conditon (data)\n\n\nsource\n\n\nReaction\n\n Reaction (reactants:list[exex.compound.core.Compound],\n           products:list[exex.compound.core.Compound]=[], environment:exex\n           .environment.Environment=<exex.environment.OpenContainer object\n           at 0x7f8d5dab6c50>)\n\nChemical Reaction\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nreactants\nlist\n\nthe list of reactants\n\n\nproducts\nlist\n[]\nthe list of products\n\n\nenvironment\nEnvironment\n<exex.environment.OpenContainer object at 0x7f8d5dab6c50>\nthe environment\n\n\nReturns\nNone\n\n\n\n\n\n\nsource\n\n\nReaction.total_property\n\n Reaction.total_property (name:str)\n\nCalculate the total properties of reactants and products\n\n\n\n\nType\nDetails\n\n\n\n\nname\nstr\nthe name of the property\n\n\nReturns\nlist\n\n\n\n\n\nr = Reaction(reactants=[Compound('C2'), Compound('O2')], products=[Compound('CO2')])\n\n\nr\n\n__main__.Reaction(formula='1C₂ + 1O₂ --> 1C₁O₂', is_balanced=False)"
  }
]