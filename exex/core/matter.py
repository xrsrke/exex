# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/00_core.matter.ipynb.

# %% auto 0
__all__ = ['State', 'Matter']

# %% ../../nbs/00_core.matter.ipynb 4
from dataclasses import dataclass
from ..imports import *
from .law import Law
from ..system import System

# %% ../../nbs/00_core.matter.ipynb 6
@dataclass
class State:
    SOLID = "solid"
    LIQUID = "liquid"
    GAS = "gas"

# %% ../../nbs/00_core.matter.ipynb 8
class Matter(metaclass=PrePostInitMeta):
    def __init__(self):
        self.properties = dict()
        self.laws = dict()
        self.time: int = None
        self.system = System()

    def __post_init__(self, *args, **kwargs):
        self._setup()

    def _setup_laws(
        self, laws: list[Law]
    ) -> None:  # add laws from `self.add_laws` to compound

        for law in laws:
            name = law.snake_name

            if not name in self.laws:
                law = law(compound=self)
                law._run_config()
                self.laws[name] = law

    def _setup(self) -> None:
        self._setup_laws(self.add_laws)

    def _set_system(self, system: System) -> None:  # the system
        self.system = system

    def get_system(self):
        return self.system

    def set_time(self, time: int):  # time
        self.time = time
        return self

# %% ../../nbs/00_core.matter.ipynb 11
@patch
@use_kwargs_dict(unit=None)
def get_prop(self: Matter, name: str, t: int, **kwargs):  # name  # time
    # if self.property_exists(args['name'])
    return self.system.get_prop(name, t, instance=self, **kwargs)

# %% ../../nbs/00_core.matter.ipynb 12
@patch
@use_kwargs_dict(unit=None)
def set_prop(self: Matter, name, val, t, **kwargs):
    return self.system.set_prop(name, val, t, instance=self, **kwargs)

# %% ../../nbs/00_core.matter.ipynb 13
@patch
def get_law(self: Matter, name, t, **kwargs):
    return self.system.get_law(name, t, instance=self, **kwargs)
