# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/01_compound.gas.ipynb.

# %% auto 0
__all__ = ['IsIdealGas', 'IdealGasLaw', 'State', 'Gas']

# %% ../../nbs/01_compound.gas.ipynb 3
import sympy as smp
from fastcore.test import *

from ..core import *
from .core import *

# %% ../../nbs/01_compound.gas.ipynb 5
class IsIdealGas(PropertyObservable):
    def __init__(self, compound):
        self.abbreviate = 'is_ideal_gas'
        super().__init__(compound)
    
    def __bool__(self):
        return False

# %% ../../nbs/01_compound.gas.ipynb 8
class IdealGasLaw(Law):
    def __init__(self, compound):
        super().__init__()
        self.compound = compound
        self.properties = [Pressure, Volume, Mole, Temperature, IsIdealGas]
    
    @property
    def expression(self):
        compound = self.compound
        left_side = compound.properties['pressure'].symbol * compound.properties['volume'].symbol
        right_side = compound.properties['mole'].symbol * compound.properties['temperature'].symbol
        return smp.Eq(left_side, right_side)
    
    def solve(self, time, unknown):
        pass

# %% ../../nbs/01_compound.gas.ipynb 12
from abc import ABC, abstractmethod

# %% ../../nbs/01_compound.gas.ipynb 13
class State(ABC):
    def __init__(self, context):
        self.context = context
    
    @abstractmethod
    def __bool__(self, timestep):
        pass

# %% ../../nbs/01_compound.gas.ipynb 15
class Gas(Compound):
    def __init__(self, formula):
        super().__init__(formula)
        
        #self._config_laws([MassMoleRatio, IdealGasLaw])
        self._config_laws([IdealGasLaw])
