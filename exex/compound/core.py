# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/01_compound.core.ipynb.

# %% auto 0
__all__ = ['State', 'Matter', 'MassMoleRatio', 'Compound']

# %% ../../nbs/01_compound.core.ipynb 4
from dataclasses import dataclass

from ..imports import *
from ..core import *
from ..system import *
from ..utils import *

# %% ../../nbs/01_compound.core.ipynb 6
@dataclass
class State:
    SOLID = 'solid'
    LIQUID = 'liquid'
    GAS = 'gas'

# %% ../../nbs/01_compound.core.ipynb 8
class Matter(metaclass=PrePostInitMeta):
    def __init__(self):
        self.properties = dict()
        self.laws = dict()
        self.time: int = None
        self.system = System()
    
    def __post_init__(self, *args, **kwargs): 
        self._setup()

    def _setup_laws(self, laws: list[Law]) -> None: # add laws from `self.add_laws` to compound
        
        for law in laws:
            name = law.snake_name
            
            if not name in self.laws:
                law = law(compound=self)
                law._run_config()
                self.laws[name] = law
    
    def _setup(self) -> None:
        self._setup_laws(self.add_laws)
    
    def _set_system(
        self,
        system: System # the system
    ) -> None:
        self.system = system
    
    def get_system(self):
        return self.system
    
    def set_time(
        self,
        time: int # time
    ):
        self.time = time
        return self

# %% ../../nbs/01_compound.core.ipynb 11
@patch
@use_kwargs_dict(unit=None)
def get_prop(
    self: Matter,
    name: str, # name
    t: int, # time
    **kwargs
):
    #if self.property_exists(args['name'])
    return self.system.get_prop(name, t, instance=self, **kwargs)

# %% ../../nbs/01_compound.core.ipynb 12
@patch
@use_kwargs_dict(unit=None, eval=False)
def set_prop(self: Matter, name, val, t, **kwargs):
    return self.system.set_prop(name, val, t, instance=self, **kwargs)

# %% ../../nbs/01_compound.core.ipynb 14
class MassMoleRatio(Law):
    def __init__(self, compound):
        super().__init__()
        self.compound = compound
        #self.properties = [Mass, Mole, MolarMass]
        self.properties = [
            {"object": Mass},
            {"object": Mole},
        ]
    
    def expr(self):
        return self.compound.get_properties('mass')

# %% ../../nbs/01_compound.core.ipynb 16
class Compound(Matter):
    
    LAWS = [MassMoleRatio]
    
    def __init__(
        self,
        formula: str # the chemical formula
    ) -> None:
        super().__init__()
        
        compound = chemlib.Compound(formula)
        #self._laws = [MassMoleRatio]
        self.add_laws = [MassMoleRatio]
        
        self.elements = compound.elements
        self.formula = compound.formula
        self._formula = formula
        self.coefficient = compound.coefficient
        self.occurences = compound.occurences
        
        self._setup_laws([MassMoleRatio])
    
    @property
    def snake_name(self) -> str: # return the snake name style
        return self._formula
    
    def info(self, **kwargs):
        dta = {}
        
        for k, v in self.properties.items():
            # data_point = {}
            # print(v._data)
            key = k
            # if v.unit:
            #     key += f' ({v.unit})'
        
            dta[key] = v._data
        
        df = pd.DataFrame(data=dta, **kwargs)
        df.index.name = "Time"
        return df.sort_index()
    
    def get_data(
        self,
        time: int, # the time
        name: str # the property name
    ):
        if not name in self.properties:
            return "The property don't exist"
        pass

    __repr__ = basic_repr('formula')
