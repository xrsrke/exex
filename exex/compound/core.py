# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/01_compound.core.ipynb.

# %% auto 0
__all__ = ['Matter', 'MassMoleRatio', 'Compound']

# %% ../../nbs/01_compound.core.ipynb 4
import chemlib
import pandas as pd
from fastcore.test import test_eq

from ..core import *
from ..utils import *

# %% ../../nbs/01_compound.core.ipynb 5
class Matter:
    def __init__(self):
        self.properties = dict()
        self.laws = dict()
    
    def _config_laws(self, laws: list[Law]) -> None:
        for law in laws:
            name = camel_to_snake(law.__name__)
            if not name in self.laws:
                law = law(compound=self)
                law._run_config()
                self.laws[name] = law
    
    def _config(self):
        pass

# %% ../../nbs/01_compound.core.ipynb 8
class MassMoleRatio(Law):
    def __init__(self, compound):
        super().__init__()
        self.compound = compound
        self.properties = [Mass, Mole]
        self.x_properties = [
            {"object": Mass},
            {"object": Mole},
        ]

# %% ../../nbs/01_compound.core.ipynb 10
class Compound(Matter):
    def __init__(
        self,
        formula: str # the chemical formula
    ) -> None:
        super().__init__()
        
        compound = chemlib.Compound(formula)
        self.elements = compound.elements
        self.formula = compound.formula
        self.coefficient = compound.coefficient
        self.occurences = compound.occurences
        
        self._config_laws([MassMoleRatio])
    
    def info(self, **kwargs):
        dta = {}
        
        for k, v in self.properties.items():
            # data_point = {}
            # print(v._data)
            key = k
            # if v.unit:
            #     key += f' ({v.unit})'
        
            dta[key] = v._data
        
        df = pd.DataFrame(data=dta, **kwargs)
        df.index.name = "Time"
        return df.sort_index()
