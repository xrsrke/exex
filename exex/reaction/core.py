# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/02_reaction.core.ipynb.

# %% auto 0
__all__ = ['Reaction']

# %% ../../nbs/02_reaction.core.ipynb 4
from ..imports import *
from ..compound.core import *
from ..system import System
from ..environment import Environment, OpenContainer
from ..utils import camel_to_snake

# %% ../../nbs/02_reaction.core.ipynb 5
@docs
class Reaction(GetAttr):
    _default = 'reaction'
    def __init__(
        self,
        reactants: list[Compound], # the list of reactants
        products: list[Compound] = [], # the list of products
        environment: Environment = OpenContainer() # the environment
    ) -> None:
        
        self.reaction = chemlib.Reaction(reactants=reactants, products=products)
        
        #self.reactants = self.reaction.reactants
        #self.products = self.reaction.products
        #self.formula = self.reaction.formula
        #self.coefficients = self.reaction.coefficients
        self.system: System = System(reactions=[self])
        self.environment: Environment = environment
    
    # @property
    # def compounds(self): # the list of all reactants and products
    #     return self.reaction.compounds
    
    # def update_chemlib(self)->None:
    #     pass
    
    def total_property(
        self,
        name: str # the name of the property
    ) -> list[float, float]:
        
        total_reactant = 0
        for reactant in self.reactants:
            if not name in reactant.properties: pass
            #total_reactant += reactant.properties[name]
            pass
        
        total_product = 0
    
        return total_reactant, total_product
    
    def balance(self) -> None:
        self.reaction.balance()
    
    __repr__ = basic_repr('formula, is_balanced')
    _docs = dict(cls_doc='Chemical Reaction',
                 balance='Balance chemical reaction',
                 total_property='Calculate the total properties of reactants and products')

# %% ../../nbs/02_reaction.core.ipynb 6
@patch(as_prop=True)
def compounds(self: Reaction): # the list of all reactants and products
    c = {}
    for compound in [*self.reactants, *self.products]:
        c[compound.snake_name] = compound
    
    return c

# %% ../../nbs/02_reaction.core.ipynb 7
@patch
def initial_condition(self: Reaction, data):
    pass

# %% ../../nbs/02_reaction.core.ipynb 8
@patch
def final_conditon(self: Reaction, data):
    pass
