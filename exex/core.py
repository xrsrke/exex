# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['Event', 'Object', 'PropertyData', 'PropertyObservable', 'Mass', 'Mole', 'Pressure', 'Volume', 'Temperature', 'Law',
           'System']

# %% ../nbs/00_core.ipynb 4
import sympy as smp
from .utils import *

# %% ../nbs/00_core.ipynb 5
class Event(list):
    def __call__(self, *args, **kwargs):
        for item in self:
            item(*args, **kwargs)

# %% ../nbs/00_core.ipynb 7
class Object:
    pass

# %% ../nbs/00_core.ipynb 8
class PropertyData(dict):
    pass

# %% ../nbs/00_core.ipynb 16
class PropertyObservable:
    def __init__(self, compound):
        self._data = PropertyData()
        self.compound = compound
        self._connections = []
        self.laws = dict()
        self.func_changed = Event()
        
        self.symbol = smp.symbols(f'{self.abbreviate}', real=True)
    
    def add_data(self, time, value):
        self._data[time] = {'value': value}
    
    def add_law(self, law):
        if not law in self.laws:
            self.laws[camel_to_snake(law.__class__.__name__)] = law

# %% ../nbs/00_core.ipynb 17
class Mass(PropertyObservable):
    def __init__(self, compound):
        self.abbreviate = 'm'
        super().__init__(compound)

# %% ../nbs/00_core.ipynb 18
class Mole(PropertyObservable):
    def __init__(self, compound):
        self.abbreviate = 'n'
        super().__init__(compound)

# %% ../nbs/00_core.ipynb 19
class Pressure(PropertyObservable):
    def __init__(self, compound):
        self.abbreviate = 'P'
        super().__init__(compound)

# %% ../nbs/00_core.ipynb 20
class Volume(PropertyObservable):
    def __init__(self, compound):
        self.abbreviate = 'V'
        super().__init__(compound)

# %% ../nbs/00_core.ipynb 21
class Temperature(PropertyObservable):
    def __init__(self, compound):
        self.abbreviate = 'T'
        super().__init__(compound)

# %% ../nbs/00_core.ipynb 23
class Law:
    def _run_config(self):
        self._config_properties()
    
    def _config_properties(self):
        for p in self.properties:
            name = camel_to_snake(p.__name__)
            
            if not name in self.compound.properties:
                self.compound.properties[name] = p(compound=self.compound)
            
            self.compound.properties[name].add_law(self)

# %% ../nbs/00_core.ipynb 25
class System:
    def __init__(self):
        pass

    def compound(self, compound):
        pass
