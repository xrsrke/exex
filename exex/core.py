# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['Event', 'PropertyData', 'PropertyObservable', 'Mass', 'Mole', 'Pressure', 'Volume', 'Temperature', 'Law', 'Mediator']

# %% ../nbs/00_core.ipynb 4
import sympy as smp

# %% ../nbs/00_core.ipynb 5
class Event(list):
    def __call__(self, *args, **kwargs):
        for item in self:
            item(*args, **kwargs)

# %% ../nbs/00_core.ipynb 9
class PropertyData(dict):
    pass

# %% ../nbs/00_core.ipynb 20
class PropertyObservable:
    def __init__(self, compound):
        self._data = PropertyData()
        self.compound = compound
        self._connections = []
        self._laws = []
        self.func_changed = Event()
        
        self.symbol = smp.symbols(f'{self.abbreviate}', real=True)
    
    def add_data(self, time, value):
        self._data[time] = {'value': value}
    
    def add_law(self, law):
        print(f'about to add law {law}')
        if not law in self._laws:
            self._laws.append(law)

# %% ../nbs/00_core.ipynb 21
class Mass(PropertyObservable):
    def __init__(self, compound):
        self.abbreviate = 'm'
        super().__init__(compound)

# %% ../nbs/00_core.ipynb 22
class Mole(PropertyObservable):
    def __init__(self, compound):
        self.abbreviate = 'n'
        super().__init__(compound)

# %% ../nbs/00_core.ipynb 23
class Pressure(PropertyObservable):
    def __init__(self, compound):
        self.abbreviate = 'P'
        super().__init__(compound)

# %% ../nbs/00_core.ipynb 24
class Volume(PropertyObservable):
    def __init__(self, compound):
        self.abbreviate = 'V'
        super().__init__(compound)

# %% ../nbs/00_core.ipynb 25
class Temperature(PropertyObservable):
    def __init__(self, compound):
        self.abbreviate = 'T'
        super().__init__(compound)

# %% ../nbs/00_core.ipynb 27
class Law:
    def init_properties(self):
        for p in self._properties:
            name = p.__name__.lower()
            print(f'####### initialzing {name} #####')
            
            if not name in self.compound._properties:
                self.compound._properties[name] = p(compound=self.compound)
            
            print(f'add to {self}')
            self.compound._properties[name].add_law(self)

# %% ../nbs/00_core.ipynb 29
class Mediator:
    pass
