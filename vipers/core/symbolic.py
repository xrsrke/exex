# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/00b_core.symbolic.ipynb.

# %% auto 0
__all__ = ['Symbol', 'Equation']

# %% ../../nbs/00b_core.symbolic.ipynb 4
from ..imports import *
from typing import Any

# %% ../../nbs/00b_core.symbolic.ipynb 6
@docs
class _BaseSymbol(sympy.core.symbol.Symbol):
    def __init__(self, *args, **kwargs):
        self._states = dict()
    
    def __new__(cls, name: str, *args, **kwargs):
        _obj = sympy.core.symbol.Symbol.__new__(cls, name)
        return _obj

    def add_state(self, name: str, value: Any) -> None:
        self._states[name] = value
        
    def get_state(self, name: str) -> Any:
        return self._states.get(name)

    @property
    def states(self) -> dict[str, Any]:
        return self._states

    _docs = dict(cls_doc="The symbol",
                 add_state="Set data",
                 get_state="Get the attribute value",
                 states="Set data")

# %% ../../nbs/00b_core.symbolic.ipynb 7
@patch(as_prop=True)
def is_evaled(self: _BaseSymbol): # Check whether the symbol is evaluated
    pass

# %% ../../nbs/00b_core.symbolic.ipynb 8
class Symbol(_BaseSymbol): pass

# %% ../../nbs/00b_core.symbolic.ipynb 21
class _BaseFunction(sympy.core.function.Function):
    def __new__(cls, name):
        _obj = sympy.core.function.Function.__new__(cls, name)
        return _obj

# %% ../../nbs/00b_core.symbolic.ipynb 24
class Equation:
    ...
