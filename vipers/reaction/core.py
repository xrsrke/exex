# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/02_reaction.core.ipynb.

# %% auto 0
__all__ = ['get_properties', 'TotalProperty', 'Reaction']

# %% ../../nbs/02_reaction.core.ipynb 4
from exex.imports import *
from exex.core.all import *
from exex.compound.core import *
from exex.environment import Environment, OpenContainer
from exex.utils import camel_to_snake, fml2str, str2fml

# %% ../../nbs/02_reaction.core.ipynb 8
def get_properties(
    l: list,  # a list of reactants or products
):  # return a of properties from l
    pass

# %% ../../nbs/02_reaction.core.ipynb 9
@docs
class TotalProperty(PropertyObservable):
    def __init__(self):
        super().__init__()

    _docs = dict(
        cls_doc="The total property of reactants, products in a chemical reaction"
    )

# %% ../../nbs/02_reaction.core.ipynb 11
@docs
class Reaction(GetAttr):
    _default = "reaction"

    def __init__(
        self,
        reactants: list[Compound],  # the list of reactants
        products: list[Compound] = [],  # the list of products
        environment: Environment = OpenContainer(),  # the environment
    ) -> None:

        self.reaction = chemlib.Reaction(reactants=reactants, products=products)

        self._reactants = reactants
        self._products = products
        # self.formula = self.reaction.formula
        # self.coefficients = self.reaction.coefficients
        self.system: System = System(reactions=[self])
        self.environment: Environment = environment

    def total_property(
        self, name: str  # the name of the property
    ) -> list[float, float]:

        total_reactant = 0
        for reactant in self.reactants:
            if not name in reactant.properties:
                pass
            # total_reactant += reactant.properties[name]
            pass

        total_product = 0

        return total_reactant, total_product

    def balance(self) -> None:
        self.reaction.balance()

    def __repr__(self):
        return f"Reaction({self.formula})"

    _docs = dict(
        cls_doc="Chemical Reaction",
        balance="Balance chemical reaction",
        total_property="Calculate the total properties of reactants and products",
    )

# %% ../../nbs/02_reaction.core.ipynb 12
@patch(as_prop=True)
def coeffs(self: Reaction):
    coeffs = {}
    for k, v in self.reaction.coefficients.items():
        coeffs[fml2str(k)] = v

    return coeffs

# %% ../../nbs/02_reaction.core.ipynb 13
@patch
def get_coeff(self: Reaction, cmp: str):
    return self.coeffs[cmp]

# %% ../../nbs/02_reaction.core.ipynb 14
@patch(as_prop=True)
def reactants(self: Reaction):
    return L(self._reactants)

# %% ../../nbs/02_reaction.core.ipynb 15
@patch(as_prop=True)
def products(self: Reaction):
    return L(self._products)

# %% ../../nbs/02_reaction.core.ipynb 16
@patch(as_prop=True)
def compounds(self: Reaction):  # the list of all reactants and products
    c = {}
    for compound in [*self.reactants, *self.products]:
        c[compound.snake_name] = compound

    return c

# %% ../../nbs/02_reaction.core.ipynb 17
@patch
def initial_condition(self: Reaction, data):
    pass

# %% ../../nbs/02_reaction.core.ipynb 18
@patch
def final_conditon(self: Reaction, data):
    pass
